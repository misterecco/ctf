from client import encrypt_many
from encryptor import BLOCK_BITS, perm1, perm2, round, encrypt as full_encrypt
from task import ROUNDS

import random

def int2str(x, len):
   s=''
   for i in range(len):
     s += chr(x & 0xFF)
     x = x >> 8
   return s[::-1]

def str2int(s):
   w = 0
   for x in s:
      w = w << 8
      w += ord(x)
   return w

def invPerm(p):
   inv = [0] * len(p)
   for i in xrange(len(p)):
     inv[p[i]]=i
   return inv
   
inv1 = invPerm(perm1)
inv2 = invPerm(perm2)


def retkey((p,c)):
    lp = p % (2 ** (BLOCK_BITS / 2))
    rp = (p >> (BLOCK_BITS / 2)) % (2 ** (BLOCK_BITS / 2))
    
    lc = c % (2 ** (BLOCK_BITS / 2))
    rc = (c >> (BLOCK_BITS / 2)) % (2 ** (BLOCK_BITS / 2))
    
    keys = []
    for k2 in range(2**(BLOCK_BITS / 2)):
       c2 = inv2[rc ^ lp] ^ k2
       k1 = inv1[c2] ^ rp
       key = (k1 << (BLOCK_BITS / 2)) | k2
       keys.append(key)
       
    return keys
   
    
def check_slide((a,b), (c,d)):
   #print  'check candidate for slide pair', hex(a), hex(b), hex(c), hex(d)
   if (b >> (BLOCK_BITS / 2)) != (d % (2 ** (BLOCK_BITS / 2))):
     return
   keys1 = retkey((a,c))
   keys2 = retkey((b,d))
   print('found candidate for slide pair', hex(a), hex(b), hex(c), hex(d))
   keys = list(set(keys1).intersection(keys2))

   if len(keys) > 0:
      print('found key candidtaies', keys)
      for k in keys:
         if full_encrypt(a, k, ROUNDS) == b:
            print('found key !', k)
      

p1 = []
p2 = []
c = 0x123
n = 2**((BLOCK_BITS/4)+1)

for i in xrange(n):
   p1.append(c << (BLOCK_BITS/2) | random.getrandbits((BLOCK_BITS/2)))
   p2.append(random.getrandbits((BLOCK_BITS/2)) << (BLOCK_BITS/2) | c)

print('encrypting pool 1')
c1 =   [str2int(x) for x in encrypt_many([int2str(x, (BLOCK_BITS/8)) for x in p1])]
print('encrypting pool 2')
c2 =   [str2int(x) for x in encrypt_many([int2str(x, (BLOCK_BITS/8)) for x in p2])]
print('encryp complete')

for x in zip(p1, c1):
   for y in zip(p2, c2):
       check_slide(x,y)